import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Activity, ArrowLeft, Loader2 } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { toast } from "sonner";
import { useDiseaseCodes } from "@/hooks/useDiseaseCodes";
import { useDistricts, useFacilitiesByDistrict } from "@/hooks/useLocation";
import { useCaseReports } from "@/hooks/useCaseReports";
import { supabase } from "@/integrations/supabase/client";
import type { CaseReportInput } from "@/lib/types";

const AGE_GROUPS = [
  "0-5",
  "6-17",
  "18-49",
  "50-64",
  "65+"
] as const;

const GENDERS = [
  { value: "male", label: "Male" },
  { value: "female", label: "Female" },
  { value: "other", label: "Other" }
] as const;

const ReportCase = () => {
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { data: diseases, isLoading: diseasesLoading } = useDiseaseCodes();
  const { data: districts, isLoading: districtsLoading } = useDistricts();
  const [selectedDistrict, setSelectedDistrict] = useState<string | null>(null);
  const { data: facilities, isLoading: facilitiesLoading } = useFacilitiesByDistrict(selectedDistrict);
  
  const [formData, setFormData] = useState<Partial<CaseReportInput>>({
    disease_code: "",
    age_group: "18-49",
    gender: "male",
    symptoms: "",
    district_id: null,
    facility_id: null,
    location_detail: "",
    notes: "",
    status: "suspected",
    sync_status: "pending",
    client_local_id: crypto.randomUUID(),
    attachments: null
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;

    // Validate required fields
    if (!formData.disease_code || !formData.symptoms || !formData.district_id) {
      toast.error("Please fill in all required fields");
      return;
    }

    setIsSubmitting(true);
    try {
      // Get the current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error("You must be logged in to submit a report");
      }

      // Prepare report data
      const reportData: CaseReportInput = {
        ...formData,
        reporter_id: user.id,
        report_date: new Date().toISOString(),
      } as CaseReportInput;

      // Submit the report
      const { error } = await supabase
        .from('case_reports')
        .insert([reportData]);

      if (error) throw error;

      toast.success("Case report submitted successfully!");
      navigate('/dashboard');
    } catch (error) {
      console.error('Error submitting report:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to submit report. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Link to="/dashboard">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            </Link>
            <div className="flex items-center gap-2">
              <Activity className="h-6 w-6 text-primary" />
              <h1 className="text-2xl font-bold text-foreground">Report New Case</h1>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8 max-w-3xl">
        <Card className="p-8 shadow-card">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Disease Selection */}
            <div className="space-y-2">
              <Label htmlFor="disease">Disease / Condition *</Label>
              <Select 
                value={formData.disease_code || ""}
                onValueChange={(value) => setFormData({ ...formData, disease_code: value })}
                disabled={diseasesLoading}
              >
                <SelectTrigger>
                  <SelectValue placeholder={diseasesLoading ? "Loading..." : "Select disease"} />
                </SelectTrigger>
                <SelectContent>
                  {diseases?.map((disease) => (
                    <SelectItem key={disease.code} value={disease.code}>
                      {disease.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Patient Information */}
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="locationDetail">Location Detail *</Label>
                <Input
                  id="locationDetail"
                  placeholder="District/sector level location"
                  value={formData.location_detail || ""}
                  onChange={(e) => setFormData({ ...formData, location_detail: e.target.value })}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="district">District *</Label>
                <Select 
                  value={formData.district_id || ""}
                  onValueChange={(value) => {
                    setSelectedDistrict(value);
                    setFormData({ ...formData, district_id: value, facility_id: null });
                  }}
                  disabled={districtsLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={districtsLoading ? "Loading..." : "Select district"} />
                  </SelectTrigger>
                  <SelectContent>
                    {districts?.map((district) => (
                      <SelectItem key={district.id} value={district.id}>
                        {district.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Facility */}
            <div className="space-y-2">
              <Label htmlFor="facility">Reporting Facility *</Label>
              <Select 
                value={formData.facility_id || ""}
                onValueChange={(value) => setFormData({ ...formData, facility_id: value })}
                disabled={!selectedDistrict || facilitiesLoading}
              >
                <SelectTrigger>
                  <SelectValue 
                    placeholder={
                      !selectedDistrict 
                        ? "Select a district first" 
                        : facilitiesLoading 
                          ? "Loading..." 
                          : "Select facility"
                    } 
                  />
                </SelectTrigger>
                <SelectContent>
                  {facilities?.map((facility) => (
                    <SelectItem key={facility.id} value={facility.id}>
                      {facility.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Patient Demographics */}
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="ageGroup">Age Group *</Label>
                <Select 
                  value={formData.age_group || ""}
                  onValueChange={(value) => setFormData({ ...formData, age_group: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select age group" />
                  </SelectTrigger>
                  <SelectContent>
                    {AGE_GROUPS.map((group) => (
                      <SelectItem key={group} value={group}>
                        {group} years
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="gender">Gender *</Label>
                <Select 
                  value={formData.gender || ""}
                  onValueChange={(value) => setFormData({ ...formData, gender: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select gender" />
                  </SelectTrigger>
                  <SelectContent>
                    {GENDERS.map((gender) => (
                      <SelectItem key={gender.value} value={gender.value}>
                        {gender.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Symptoms */}
            <div className="space-y-2">
              <Label htmlFor="symptoms">Symptoms *</Label>
              <Textarea
                id="symptoms"
                placeholder="Describe observed symptoms (e.g., fever, cough, rash...)"
                value={formData.symptoms || ""}
                onChange={(e) => setFormData({ ...formData, symptoms: e.target.value })}
                required
                rows={4}
              />
            </div>

            {/* Notes */}
            <div className="space-y-2">
              <Label htmlFor="notes">Additional Notes</Label>
              <Textarea
                id="notes"
                placeholder="Any additional observations or notes"
                value={formData.notes || ""}
                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                rows={3}
              />
            </div>

            {/* Submit */}
            <div className="flex justify-end gap-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => navigate(-1)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Submit Report
              </Button>
            </div>
          </form>
        </Card>
      </main>
    </div>
  );
};

export default ReportCase;